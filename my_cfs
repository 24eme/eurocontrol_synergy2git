#!/usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell


=head1 SYNOPSIS

    my_cfs [--depend <external dependencies>] [--first <projects>] [--last <projects>] <dump_directory> <top level project objectname> { <nested projects objectnames> }

=head1 DESCRIPTION

this script creates a snapshot of a released synergy project that has been extracted in branch db.
 It takes as parameters:
 - the directory where synergy has been dumped to
 - the top level project
 - a list (that may be empty) of subprojects objectnames. The intended use is the delivery project

 it has optional parameters
 --depend a list (colon separated) of project names that do not need to be dumped and that shall be taken as foreign dependencies
 --first a list (colon separated) of project names that should be dumped in priority over other projects
 --last a list (colon separated) of project names that should be dumped after other projects
 The optional parameters can also be passed as environment variables CFS_FIRST CFS_LAST CFS_DEPEND

=head1 EXAMPLE

 cd /development/git/jef/arh_repo/
 ~/homemade/eurocontrol_synergy2git_old/my_cfs /tmp/jef Oasis_Generation-ACE2018A_20180606:project:ARH#1 Oasis_Infrastructure_Delivery-ACE2019A_V1.0:project:ARH#1 

 ~/homemade/eurocontrol_synergy2git_old/my_cfs --depend Oasis_Infrastructure_Delivery /development/infra-project/jfbocque/SPV19A ESCAPE_Supervision-ACE2019A_V2.1:project:ARH#1 ESCAPE_Supervision_Delivery-ACE2019A_V2.1:project:ARH#1  2>&1 | tee ~/mm.log

=head1 REMARK

  if you need to keep empty directories in git, you may need the command (the loop allows to avoid .git directory)
  for i in * ; do find $i -type d -empty -exec touch {}/.keep \; ; done

=cut

use strict;
use warnings;

use File::Path qw(make_path);
use Cwd qw(cwd);
use Getopt::Long;
use Pod::Usage;

my $opt_first;
my $opt_last;
my $opt_depend;

$opt_first  = $ENV{CFS_FIRST}  if exists $ENV{CFS_FIRST};
$opt_last   = $ENV{CFS_LAST}   if exists $ENV{CFS_LAST};
$opt_depend = $ENV{CFS_DEPEND} if exists $ENV{CFS_DEPEND};

GetOptions('help'     => \my $help,
           'first=s'  => \$opt_first,
           'last=s'   => \$opt_last,
           'depend=s' => \$opt_depend) or pod2usage(q(-verbose) => 1);
pod2usage(q(-verbose) => 2) if $help;

my @dep_names;
@dep_names = split(':', $opt_depend) if defined $opt_depend and $opt_depend ne '';

my %order_names;
if (defined $opt_first and $opt_first ne '') {
    my @a = split ':', $opt_first; 
    @order_names{@a} = (-$#a-1)..-1;
}

my @last_names_array;
if (defined $opt_last and $opt_last ne '') {
    @last_names_array = split ':', $opt_last; 
    @order_names{@last_names_array} = 1..($#last_names_array+1);
}

my %obj2content;
my %obj2hist; # not used in this script
my $verbose = 0;

print STDERR "$0 "."@ARGV"."\n";
print STDERR 'depend: ', join (', ', @dep_names), "\n" if scalar @dep_names;

my ($path2gitdb, $top_objectname, @delivery_objectnames) = @ARGV;
pod2usage(q(-verbose) => 1) unless $path2gitdb && $top_objectname;

# ensure that order_names contains all the delivery projects
foreach my $delivery (@delivery_objectnames) {
    my ($delname, $delversion, $delctype, $delinstance) = parse_object_name($delivery);
    if (exists $order_names{$delname}) {
        print STDERR "$delname was already in \%order_names: $order_names{$delname}\n";
    } else {
        push @last_names_array, $delname;
        $order_names{$delname} = $#last_names_array+1;
    }
}

my $root = cwd();
chdir($path2gitdb);

unless (-e "./.git") {
    print STDERR "ERROR: $path2gitdb isn't a git repo\n";
    exit 1;
}
if (system('git branch --list db') != 0) {
    print STDERR "ERROR: the git repository ($path2gitdb) should have a db banch\n";
    exit 2;
}

my %exec_obj = map {($_ => 1)} git_show('exec_obj.csv');

foreach my $line (git_show('md5_obj.csv')) {
    my ($content, $hist, $obj) = split(';', $line);
    $obj2content{$obj} = $content;
    $obj2hist{$obj} = $hist;
}

unless (keys(%obj2hist)."") {
    print STDERR "cannot have access to the object list :(\n";
    exit 3;
}

my %hdep_names = map {($_ => 1)} @dep_names;

sub get_order {
    my $objectname = shift;
    my $name = (parse_object_name($objectname))[0];
    return exists $order_names{$name} ? $order_names{$name} : 0;
}

# if an object is encountered more than once, the second occurence is replaced by a symlink
my %encountered_objects;

my $main_dir = (parse_object_name($top_objectname))[0] . '/';
warn "Warning: $main_dir is not empty\n" if <$main_dir/*>;
dump_tree('', $top_objectname, '') or die ("unable to find $top_objectname");

sub dump_tree {
    # relpath is destination directory (relative to $root), either empty or has a trailing /
    # subpath is subdirectory of objectname, either empty or with trailing /
    my ($relpath, $top_objectname, $subpath) = @_;
    make_path("$root/$relpath");
    print STDERR "Dumping tree $top_objectname $subpath toward $relpath\n" if ($verbose);
    my @ls = git_show(object_name_to_path($top_objectname) . "/${subpath}ls");

    if ($#ls < 0) {
        return 0;
    }

    # subprojects are processed after the content of project, but their location is memorized first
    my @subprojects = grep {(parse_object_name($_))[2] eq 'project'} @ls;
    # delivery projects 
    if ($relpath eq $main_dir) {
        foreach my $delivery (@delivery_objectnames) {
            my ($delname, $delversion, $delctype, $delinstance) = parse_object_name($delivery);
            @subprojects = grep {(parse_object_name($_))[0] ne $delname} @subprojects;
            push @subprojects, $delivery;
        }
    }

    @subprojects = sort {get_order($a) <=> get_order($b) || $a cmp $b} @subprojects;
    print 'Subprojects ', join (', ', @subprojects), "\n" if scalar @subprojects;

    map {$encountered_objects{$_} = $relpath . (parse_object_name($_))[0]
             unless exists $encountered_objects{$_}} @subprojects;
    # dump content of project except subprojects
    foreach my $file (@ls) {
        my ($name, $version, $ctype, $instance) = parse_object_name($file);
        next if $ctype eq 'project';
        if ($ctype eq 'symlink') {
            my ($symlink_content) = git_show(object_name_to_path($file)."/content");
            print "symlink $symlink_content, $root/${relpath}$name\n" if ($verbose);
            symlink ($symlink_content, "$root/${relpath}$name");
        } elsif ($ctype eq 'dir') {
            dump_tree("${relpath}$name/", $top_objectname, "${subpath}$name/");
        } elsif (exists $encountered_objects{$file}) {
            createsymlink($name, $relpath, $encountered_objects{$file});
        } elsif (exists $obj2content{$file}) {
            if ($obj2content{$file} eq '') { # this should hapen only for is_product objects. Normally obj2content does not exist for them.
                warn "Warning: no content for $file for $relpath\n";
            } else {
                `git cat-file blob $obj2content{$file} > "$root/${relpath}$name" 2> /dev/null || echo "ERROR: impossible to retreive $file ($obj2content{$file}) to $root/${relpath}$name" >&2`;
                chmod (0755, "$root/${relpath}$name") if exists $exec_obj{$file};
            }
        } else {
            warn "Warning: $file not found for $relpath\n";
            # OaFctC.i-ACE2018A_V0.1:inline:ARH#2 does not exist in md5_obj.csv because it is a product
        }
        $encountered_objects{$file} = "${relpath}$name" unless exists $encountered_objects{$file};
    }
    # dump subprojects
    foreach my $proj (@subprojects) {
        my ($name, $version, $ctype, $instance) = parse_object_name($proj);
        if (exists $hdep_names{$name}) {
            print STDERR "replace subproject $name by a link\n" if($verbose);
            createsymlink($name, $relpath, "${main_dir}dependencies/${name}-$version");
        } elsif ($encountered_objects{$proj} ne "${relpath}$name") {
            createsymlink($name, $relpath, $encountered_objects{$proj});
        } else {
            dump_tree("${relpath}$name/", $proj, "$name/");
        }
    }

    return 1;
}

sub createsymlink {
    my ($name, $whereami, $target) = @_;
    print STDERR "createsymlink ($name, $whereami, $target)\n" if ($verbose);
    symlink(findrealpath($whereami, $target), "$root/${whereami}$name");
}

# creates a relative path knowing the current path and the path of a target
sub findrealpath {
    my ($whereami, $target) = @_;
    my ($mtop, $msub) = $whereami =~ m|(.*?)/(.*)|;
    my ($ttop, $tsub) = $target   =~ m|(.*?)/(.*)|;
    return findrealpath($msub, $tsub) if defined $mtop && defined $ttop && $mtop eq $ttop;
    return '../' x ($whereami =~ tr|/||) . $target;
}

# dump a file in the branch db and returns an array of lines
sub git_show {
    my $path = shift;
    print STDERR "git show db:${path}\n" if ($verbose);
    open my $cmd, "git show db:${path} |" or die "Can't exec git show db:${path}: $!";
    my @files = <$cmd>;
    chomp @files;
    return @files;
}

# convert an objectname into a path
sub object_name_to_path {
    my ($name, $version, $ctype, $instance) = parse_object_name(shift);
    return "${ctype}/${name}/${instance}/${version}";
}

# split the four part objectname even in edge cases (names containing dash or separated from version using colon instead of dash)
sub parse_object_name {
    my $objectname = shift;
    print STDERR "resolving '$objectname'\n" if ($verbose);
    # extract fourth part: instance
    my $ri = rindex($objectname, ':');
    die "wrong objectname '$objectname' does not contain : before instance" if $ri == -1;
    my $instance = substr($objectname, $ri + 1);
    # extract third part: type
    my $cri = rindex($objectname, ':', $ri - 1);
    die "wrong objectname '$objectname' does not contain : before type" if $cri == -1;
    my $ctype = substr($objectname, $cri + 1, $ri - $cri -1);
    # extract second part: version
    my $vri = rindex($objectname, ':', $cri - 1);
    $vri = rindex($objectname, '-', $cri - 1) if $vri == -1;
    die "wrong objectname '$objectname' does not contain : or - before version" if $vri == -1;
    my $version = substr($objectname, $vri + 1, $cri - $vri -1);
    # first part: name
    my $name = substr($objectname, 0, $vri);
    return ($name, $version, $ctype, $instance);
}
